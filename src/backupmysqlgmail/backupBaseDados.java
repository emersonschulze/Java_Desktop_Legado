/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * backupBaseDados.java
 *
 * Created on 22/06/2010, 22:18:26
 */
package backupmysqlgmail;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.mail.EmailException;
import util.DAOGenerico;

/**
 *
 * @author Frank
 */
public class backupBaseDados extends javax.swing.JDialog {

    /** Creates new form backupBaseDados */
    public backupBaseDados(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btBackupBaseDados = new javax.swing.JButton();
        btRestBaseDados = new javax.swing.JButton();
        btFechar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("..:: Backup ::..");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        btBackupBaseDados.setText("Backup Base de Dados");
        btBackupBaseDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBackupBaseDadosActionPerformed(evt);
            }
        });

        btRestBaseDados.setText("Restaurar Base de Dados");
        btRestBaseDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRestBaseDadosActionPerformed(evt);
            }
        });

        btFechar.setText("Fechar");
        btFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFecharActionPerformed(evt);
            }
        });

        jButton1.setText("Configurar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(btRestBaseDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btBackupBaseDados, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(btFechar, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btBackupBaseDados, btFechar, btRestBaseDados, jButton1});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(btBackupBaseDados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btRestBaseDados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btFechar)
                .addGap(18, 18, 18))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btBackupBaseDados, btFechar, btRestBaseDados, jButton1});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backup() throws FileNotFoundException, IOException {
        String caminho = "";
        String arquivo = "";
            List<entidadeBackup> bac = new DAOGenerico<entidadeBackup>(entidadeBackup.class).list();
            if (bac.size() > 0) {
                entidadeBackup bc = bac.get(0);

                SimpleDateFormat dataO = new SimpleDateFormat("dd-MM-yyyy");
               SimpleDateFormat hora = new SimpleDateFormat("HH-mm-ss");
                String dat = (String) dataO.format(new Date());
            String hor = (String) hora.format(new Date());

            arquivo = "backup-" + dat + "-" + hor;
              
                caminho = bc.getDiretorioSalvarSql().toString() + "/";

                Process p = Runtime.getRuntime().exec("cmd.exe /c " + caminho + "mysqldump -i -h " + bc.getEnderecoServidor() + " --user=" + bc.getUsuarioBase() + " --password=" + bc.getSenhaBase() + " --opt --default-character-set=latin1 " + bc.getNomeBaseDados() + ">" + caminho + arquivo + ".sql");
                try {
                    p.waitFor();

                } catch (InterruptedException ex) {
                    Logger.getLogger(backupBaseDados.class.getName()).log(Level.SEVERE, null, ex);
                }
                p.getOutputStream();

                p.exitValue();

                if (p.exitValue() == 0) {
                    FileInputStream inStream = new FileInputStream(caminho + arquivo + ".sql");
                    ZipOutputStream outStream = new ZipOutputStream(new FileOutputStream(caminho + arquivo + ".zip"));

                    outStream.putNextEntry(new ZipEntry(arquivo + ".sql"));

                    byte[] buffer = new byte[1024];
                    int bytesRead;

                    while ((bytesRead = inStream.read(buffer)) > 0) {
                        outStream.write(buffer, 0, bytesRead);
                    }

                    outStream.closeEntry();
                    outStream.close();
                    inStream.close();
                }

            
        
        JOptionPane.showMessageDialog(null, "Foi gerado um arquivo em: " + caminho + arquivo + ".zip");
        Object[] opt = {"Enviar Email", "NÃ£o Enviar"};

        if (JOptionPane.YES_NO_OPTION == JOptionPane.showOptionDialog(null, "Deseja Enviar uma copia do arquivo de backup por Email?", "Mensagem",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opt, opt[0])) {
            enviaEmail(caminho, arquivo);
        }
        }else{
                    JOptionPane.showMessageDialog(null, "Necessario Configurar o backup", "Menssagem", JOptionPane.ERROR_MESSAGE);
            }
    }
    private void btBackupBaseDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBackupBaseDadosActionPerformed
        // TODO add your handling code here:
        this.setModal(false);
        final barraProgresso p = new barraProgresso(null, true);
        p.setVisible(true);
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                backup();
                return null;

            }

            @Override
            protected void done() {
                p.setVisible(false);

            }
        };
        worker.execute();

//this.setModal(true);

    }//GEN-LAST:event_btBackupBaseDadosActionPerformed
    private void enviaEmail(String caminho, String arquivo) {


        dadosEmail dm = new dadosEmail(null, true);
        dm.setVisible(true);
        if(dm.getConfirma().equals("sim")){
          
          
        try {
            
            File fil=new File(caminho + arquivo + ".zip");
         
            new enviaEmail(dm.getEmail(), dm.getSenha(),fil.getAbsolutePath() , arquivo);

        } catch (EmailException ex) {
            Logger.getLogger(backupBaseDados.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }

    private void btFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFecharActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btFecharActionPerformed
    private void restauraBase() {
        try {
            String caminho = "";
            JFileChooser fileChooser = new JFileChooser();

            fileChooser.setFileFilter(new FileNameExtensionFilter("SQL",
                    "sql"));

            int res = fileChooser.showOpenDialog(null);

            if (res == JFileChooser.APPROVE_OPTION) {
                File arquivo = fileChooser.getSelectedFile();
                caminho = arquivo.getAbsolutePath();
                try {
                    List<entidadeBackup> bac = new DAOGenerico<entidadeBackup>(entidadeBackup.class).list();
                    if (bac.size() >= 0) {
                        entidadeBackup bc = bac.get(0);


                        Process pro = Runtime.getRuntime().exec("cmd.exe /c " + bc.getDiretorioSalvarSql() + "/mysql  --user=" + bc.getUsuarioBase() + " -i -h " + bc.getEnderecoServidor() + " --password=" + bc.getSenhaBase() + " " + bc.getNomeBaseDados() + " < " + caminho);

                        try {
                            pro.waitFor();
                        } catch (InterruptedException ex) {
                            Logger.getLogger(backupBaseDados.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if (pro.exitValue() == 0) {
                            JOptionPane.showMessageDialog(null, "Base de dados Restaurada com Sucesso", "Menssagem", JOptionPane.INFORMATION_MESSAGE);
                        } else {

                            JOptionPane.showMessageDialog(null, "Erro ao restaurar base de dados for", "Menssagem", JOptionPane.ERROR_MESSAGE);
                        }


                    }
                } catch (IOException ex) {
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao restaurar base de dados", "Menssagem", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void btRestBaseDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRestBaseDadosActionPerformed
        // TODO add your handling code here:
        this.setModal(false);
        final barraProgresso p = new barraProgresso(null, true);
        p.setVisible(true);
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                restauraBase();
                return null;

            }

            @Override
            protected void done() {
                p.setVisible(false);

            }
        };
        worker.execute();
    }//GEN-LAST:event_btRestBaseDadosActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        configuracaoBackup con = new configuracaoBackup(null, true);
        con.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                backupBaseDados dialog = new backupBaseDados(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBackupBaseDados;
    private javax.swing.JButton btFechar;
    private javax.swing.JButton btRestBaseDados;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
